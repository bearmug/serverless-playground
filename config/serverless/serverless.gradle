task graalAssemble(type: Exec, group: 'serverless') {
    inputs.files(
            project.fileTree(dir: "src", include: "**/*.*"),
            file('Dockerfile'),
            file('build.gradle'))
    outputs.file('build/function.zip')
    def tag = 'serverless-graal'
    commandLine 'bash', '-c',
            "docker build . -t $tag -f $rootDir/config/graal/Dockerfile &&" +
                    "mkdir -p build &&" +
                    "docker run --rm --entrypoint cat $tag  /home/application/function.zip > build/function.zip"
}
task serverlessDeploy(
        type: Exec,
        group: 'serverless',
        dependsOn: ['build', 'graalAssemble']) {
    commandLine 'bash', '-c', "serverless deploy"
}

task serverlessRemove(type: Exec, group: 'serverless') {
    commandLine 'bash', '-c', "serverless remove"
}

task serverlessStatsJava(type: Exec, group: 'serverless') {
    def fn = '-f serverless-mn-java'
    commandLine 'bash', '-c',
            "serverless logs $fn  && serverless info $fn && serverless metrics $fn"
}

task serverlessStatsGraal(type: Exec, group: 'serverless') {
    def fn = '-f serverless-mn-graal'
    commandLine 'bash', '-c',
            "serverless logs $fn  && serverless info $fn && serverless metrics $fn"
}

task serverlessStatsNode(type: Exec, group: 'serverless') {
    def fn = '-f serverless-nodejs'
    commandLine 'bash', '-c',
            "serverless logs $fn  && serverless info $fn && serverless metrics $fn"
}

def url = project.hasProperty('urlArg') ? urlArg : null
task loadTest(type: Exec) {
    doFirst {
        if (url == null) {
            throw new IllegalStateException('Please set URL to run load test against: -PurlArg=<your-url-here>')
        }
    }
    commandLine 'bash', '-c', "docker run -i loadimpact/k6 run -e url=$url -< $rootDir/config/load-test/load-test-simple.js"
}